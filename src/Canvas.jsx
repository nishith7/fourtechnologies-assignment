import { Stack, Typography } from '@mui/material'
import React, { useEffect, useRef } from 'react'

const Canvas = () => {
    const canvasRef = useRef(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const stars = [];
    const starCount = 100;

    // Set canvas size
    canvas.width = window.innerWidth;
    canvas.height = 457;

    // Star class to store position and velocity
    class Star {
      constructor(x, y, radius, velocityX, velocityY) {
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.velocityX = velocityX;
        this.velocityY = velocityY;
      }

      // Draw the star
      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = '#eb575c';
        ctx.fill();
        ctx.closePath();
      }

      // Update star position
      update() {
        this.x += this.velocityX;
        this.y += this.velocityY;

        // Reverse direction when hitting the edges
        if (this.x < 0 || this.x > canvas.width) this.velocityX *= -1;
        if (this.y < 0 || this.y > canvas.height) this.velocityY *= -1;
      }
    }

    // Generate random stars
    for (let i = 0; i < starCount; i++) {
      const radius = Math.random() * 2;
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      const velocityX = (Math.random() - 0.5) * 0.5;
      const velocityY = (Math.random() - 0.5) * 0.5;
      stars.push(new Star(x, y, radius, velocityX, velocityY));
    }

    // Function to draw the lines connecting stars
    function drawLines() {
      for (let i = 0; i < stars.length; i++) {
        for (let j = i + 1; j < stars.length; j++) {
          const distance = Math.sqrt(
            (stars[i].x - stars[j].x) ** 2 + (stars[i].y - stars[j].y) ** 2
          );
          if (distance < 100) {
            ctx.beginPath();
            ctx.moveTo(stars[i].x, stars[i].y);
            ctx.lineTo(stars[j].x, stars[j].y);
            ctx.strokeStyle = '#eb575c';
            ctx.stroke();
            ctx.closePath();
          }
        }
      }
    }

    // Animation loop
    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      stars.forEach(star => {
        star.update();
        star.draw();
      });
      drawLines();
      requestAnimationFrame(animate);
    }

    animate();
  }, []);

  return (
    <Stack marginTop={10} paddingTop={7} paddingBottom={5} maxHeight={'457px'} justifyContent={'center'} alignItems={'center'}
    sx={{ 
        position: 'relative', 
        backgroundImage: 'linear-gradient(to right bottom, #eb575c 0%, #000 100%)' 
      }}
    >
        <canvas
        ref={canvasRef}
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          zIndex: 0, // Make sure the canvas is behind the content
        }}
      />
        <Typography fontSize={'33px'} fontWeight={600} color='white'>
        The AdPushup  <span style={{fontStyle:'italic'}}>Advantage</span>
        </Typography>
        <Stack marginLeft={10} marginRight={10} marginTop={5} direction={'row'} gap={10}>
            <Stack maxWidth={'350px'} >
            <Typography fontSize={'17px'} fontWeight={600} color='white' letterSpacing={'2px'}>
            QUICK INTEGRATION
            </Typography>
            <Typography  marginTop={2}color='#ffffffd9' fontSize={'16px'}>
            Get started quickly by including a single line of JS code in the header of your site, our account manager will then help you with on-boarding.
            </Typography>

            </Stack>
            <Stack maxWidth={'350px'}>
            <Typography fontSize={'17px'} fontWeight={600} color='white' letterSpacing={'2px'}>
            CONTINUOUS OPTIMIZATION
            </Typography>
            <Typography marginTop={2} color='#ffffffd9' fontSize={'16px'}>
            Our machine learning based optimization engine displays the best-performing ad layouts based on data collected during testing.
            </Typography>

            </Stack>
            <Stack maxWidth={'350px'}>
            <Typography fontSize={'17px'} fontWeight={600} color='white' letterSpacing={'2px'}>
            Easy payments
            </Typography>
            <Typography marginTop={2} color='#ffffffd9' fontSize={'16px'}>
            Get paid via PayPal or bank wire on Net-45 terms for the revenue generated by serving ads through our network on your site.
            </Typography>

            </Stack>
            

        </Stack>
    </Stack>
  )
}

export default Canvas